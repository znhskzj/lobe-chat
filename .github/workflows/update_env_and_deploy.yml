name: Update Env and Deploy

on:
  schedule:
    - cron: '0 0 * * *' # 每天执行一次
  workflow_dispatch: # 手动触发

jobs:
  update-env-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate new access code
      id: generate-code
      run: |
        new_access_code=$(date +%Y%m%d%H%M%S | sha256sum | base64 | head -c 12)
        echo "new_access_code=$new_access_code" >> $GITHUB_ENV
        echo "The new access code is $new_access_code"  # 输出到日志

    - name: Get environment variable ID
      id: get-env-id
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_1 }}
        VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
      run: |
        response=$(curl -s -X GET "https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID/env" \
          -H "Authorization: Bearer $VERCEL_API_TOKEN" \
          -H "Content-Type: application/json")
        echo "Response: $response"
        env_id=$(echo $response | jq -r '.envs[] | select(.key=="ACCESS_CODE") | .id')
        if [ -z "$env_id" ]; then
          echo "Failed to get environment variable ID"
          exit 1
        fi
        echo "env_id=$env_id" >> $GITHUB_ENV

    - name: Update Vercel Project environment variable
      id: update-env
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_1 }}
        VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
        NEW_ACCESS_CODE: ${{ env.new_access_code }}
        ENV_ID: ${{ env.env_id }}
      run: |
        echo "Updating Vercel Project ID: $VERCEL_PROJECT_ID"
        echo "Using API Token: $VERCEL_API_TOKEN"
        echo "New Access Code: $NEW_ACCESS_CODE"
        response=$(curl -s -o /dev/stderr -w "%{http_code}" -X PATCH "https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID/env/$ENV_ID" \
          -H "Authorization: Bearer $VERCEL_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
                "value": "'"$NEW_ACCESS_CODE"'",
                "target": ["production", "preview", "development"]
              }')
        echo "Response: $response"
        if [ "$response" -ne 200 ]; then
          echo "Failed to update environment variable. Status code: $response"
          exit 1
        fi
        echo "Updated Vercel environment variable ACCESS_CODE with value: $NEW_ACCESS_CODE"

    - name: Trigger redeployment for Vercel project
      run: |
        echo "Triggering redeployment for Vercel Project ID: $VERCEL_PROJECT_ID"
        response=$(curl -s -o /dev/stderr -w "%{http_code}" -X POST "https://api.vercel.com/v13/deployments" \
          -H "Authorization: Bearer ${{ secrets.VERCEL_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
                "project": "'$VERCEL_PROJECT_ID'",
                "name": "my-deployment",
                "target": "production"
              }')
        echo "Response: $response"
        if [ "$response" -ne 201 ]; then
          echo "Failed to trigger redeployment. Status code: $response"
          exit 1
        fi
        echo "Triggered redeployment for Vercel project with ID: $VERCEL_PROJECT_ID"
      env:
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_1 }}
        new_access_code: ${{ env.new_access_code }}


    - name: Send email with new access code
      if: success() # 只有在前面的步骤成功时才发送邮件
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER_ADDRESS }}
        server_port: ${{ secrets.SMTP_SERVER_PORT }}
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "New Access Code for Vercel Project"
        to: ${{ secrets.ADMIN_EMAIL }}
        body: "The new access code is ${{ env.new_access_code }}"
        from: ${{ secrets.EMAIL_FROM }}
